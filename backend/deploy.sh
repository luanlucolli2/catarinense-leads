#!/bin/bash

# deploy.sh
# Script para deploy manual da aplica√ß√£o Catarinense Leads em ambiente de staging.
#
# COMO USAR:
# 1. Coloque este arquivo na raiz do seu projeto no servidor.
# 2. D√™ permiss√£o de execu√ß√£o: chmod +x deploy.sh
# 3. Execute o script: ./deploy.sh

# --- Configura√ß√£o ---
# Encerra o script imediatamente se qualquer comando falhar.
set -e

# O nome do seu arquivo docker-compose de staging.
COMPOSE_FILE="docker-compose.staging.yml"

# O nome do servi√ßo do Laravel no arquivo compose.
LARAVEL_SERVICE="laravel"

# O nome do branch principal do seu reposit√≥rio.
GIT_BRANCH="main"


# --- In√≠cio do Deploy ---
echo "üöÄ Iniciando deploy para o ambiente de staging..."

# Passo 1: Entrar em modo de manuten√ß√£o (Opcional, mas recomendado)
# Isso mostra uma p√°gina de "em manuten√ß√£o" para os usu√°rios enquanto o deploy ocorre.
# O script continuar√° mesmo se a aplica√ß√£o j√° estiver em modo de manuten√ß√£o.
echo ">>> 1/7: Colocando a aplica√ß√£o em modo de manuten√ß√£o..."
cd backend || exit
docker compose -f $COMPOSE_FILE exec $LARAVEL_SERVICE php artisan down || echo "Aplica√ß√£o j√° estava em modo de manuten√ß√£o ou n√£o foi poss√≠vel conectar. Continuando..."
cd ..

# Passo 2: Puxar o c√≥digo mais recente do reposit√≥rio
echo ">>> 2/7: Puxando atualiza√ß√µes do branch '$GIT_BRANCH'..."
git pull origin $GIT_BRANCH

# Passo 3: Reconstruir as imagens Docker
# Este passo √© VITAL. Ele ir√° instalar novas depend√™ncias (composer e npm)
# e copiar o novo c√≥digo para dentro das imagens, criando um artefato final.
echo ">>> 3/7: Reconstruindo as imagens Docker com o novo c√≥digo..."
cd backend || exit
docker compose -f $COMPOSE_FILE build --no-cache

# Passo 4: Subir os novos cont√™ineres
# O --force-recreate garante que os cont√™ineres antigos sejam destru√≠dos
# e novos sejam criados a partir das imagens que acabamos de construir.
echo ">>> 4/7: Recriando e subindo os cont√™ineres..."
docker compose -f $COMPOSE_FILE up -d --force-recreate

# Passo 5: Executar as migra√ß√µes do banco de dados
# Executa as migra√ß√µes no novo container, garantindo que o DB esteja atualizado.
# O --force √© necess√°rio para rodar em modo n√£o-interativo (produ√ß√£o).
echo ">>> 5/7: Rodando migra√ß√µes do banco de dados..."
docker compose -f $COMPOSE_FILE exec $LARAVEL_SERVICE php artisan migrate --force

# Passo 6: Limpar e otimizar os caches do Laravel
# Fundamental para que o Laravel reconhe√ßa as novas configura√ß√µes, rotas e views.
echo ">>> 6/7: Limpando caches e otimizando a aplica√ß√£o..."
docker compose -f $COMPOSE_FILE exec $LARAVEL_SERVICE php artisan optimize

# Passo 7: Sair do modo de manuten√ß√£o
echo ">>> 7/7: Tirando a aplica√ß√£o do modo de manuten√ß√£o..."
docker compose -f $COMPOSE_FILE exec $LARAVEL_SERVICE php artisan up

echo "‚úÖ Deploy finalizado com sucesso!"